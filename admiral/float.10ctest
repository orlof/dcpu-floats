#segment code
; ========================================================================
; user unit test code function
; ========================================================================
:unit_test

jsr detect_hardware
jsr init_monitor

; convert 1st string to float
set push, stc1              ; 1st arg for atof (input string)
set push, ftc1              ; 2nd arg for atof (target float = 32 bits)
jsr atof                    ; call to atof, no return value

; convert 2nd string to float
set push, stc2
set push, ftc2 
jsr atof 

; division of floats
set push, float_result      ; quotient address where fdiv stores the result
set push, ftc1              ; divident
set push, ftc2              ; divisor
jsr fdiv                    ; call fdiv, no return value

; convert result float to string
set push, float_result      ; input float (quotient)
set push, string_result     ; destination string buffer
jsr ftoa

set a, string_result
set b, 64
jsr print

set pc, hang

#segment data
:stc1
	dat "123.456", 0      ; divident as string
:ftc1 
	dat 0,0               ; space to store divident as float

:stc2 
	dat "654.321", 0       ; divisor as string
:ftc2 
	dat 0,0               ; space to store divisor as float

:float_result 
	dat 0,0       ; space to store quotient as float
:string_result 
	dat "this is just a place holder for ftoa"
   
#segment code   
.pass:
    set a, UNIT_TEST_PASS
    hwi [debugger_device]
    
.fail:
	set a, UNIT_TEST_FAIL
	hwi [debugger_device]

.hang:
    set pc, .hang

; ========================================================================
; unit test support code (debugger device interface)
; ========================================================================
#define NO_DEVICE 0xffff
#define TRIGGER_BREAKPOINT 0
#define OUTPUT_DIAG_WORD 1
#define OUTPUT_DIAG_WORD_ZSTRING 2
#define OUTPUT_DIAG_WORD_PSTRING 3
#define UNIT_TEST_PASS 4
#define UNIT_TEST_FAIL 5
#define SET_PROCESSOR_SPEED 6
#define GET_PROCESSOR_SPEED 7
#define RESET_CYCLE_COUNTER 8
#define GET_CYCLE_COUNTER 9

#segment data
:debugger_device
    dat 0

#segment boot
    :detect_debugger
        hwn z
    .loop
        sub z, 1
        hwq z
        ife b,0xdeb9
            ife a,0x1111
                set pc, .found
        ifn z, 0
            set pc, .loop
    .notfound
        set z, NO_DEVICE
    .found
        set [debugger_device], z
        set pc, unit_test
